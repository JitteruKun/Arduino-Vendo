#include <Keypad.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>

#define ROW_NUM 4       // four rows
#define COLUMN_NUM 3    // three columns for 4x3 keypad
#define SERVO_PIN_1 A0  // the Arduino pin, which connects to the first servo motor
#define SERVO_PIN_2 A1  // the Arduino pin, which connects to the second servo motor
#define SERVO_PIN_3 A2  //  the Arduino pin, which connects to the third servo motor
#define SERVO_PIN_4 A3  //  the Arduino pin, which connects to the fourth servo motor

Servo servo1;  // first servo motor
Servo servo2;  // second servo motor
Servo servo3;  // third servo motor
Servo servo4;  // fourth servo motor

char keys[ROW_NUM][COLUMN_NUM] = {
  { '1', '2', '3' },
  { '4', '5', '6' },
  { '7', '8', '9' },
  { '*', '0', '#' }
};

byte pin_rows[ROW_NUM] = { 8, 7, 6, 5 };     // connect to the row pinouts of the keypad
byte pin_columns[COLUMN_NUM] = { 4, 3, 2 };  // connect to the column pinouts of the keypad

// Define your keypad and LCD
Keypad kp = Keypad(makeKeymap(keys), pin_rows, pin_columns, ROW_NUM, COLUMN_NUM);
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Set the LCD address to 0x27 for a 16 chars and 2 line display

const String password_1 = "1";  // input for first servo
const String password_2 = "2";  // input for second servo
const String password_3 = "3";  // input for third servo
const String password_4 = "4";  // input for fourth servo
String input_password;

unsigned long lastTime1;
unsigned long lastTime2;
unsigned long lastTime3;
unsigned long lastTime4;

int angle1 = 90;  // the current angle of first servo motor
int angle2 = 90;  // the current angle of second servo motor
int angle3 = 90;  // the current angle of third servo motor
int angle4 = 90;  // the current angle of fourth servo motor

int rotation_duration = 2000;  // Default rotation duration (3 seconds) for all servos
unsigned long rotationStartTime1;
unsigned long rotationStartTime2;
unsigned long rotationStartTime3;
unsigned long rotationStartTime4;

bool scrolling = false; // Flag to indicate if LCD scrolling is in progress
unsigned long scrollStartTime; // Time when LCD scrolling started

// Function to scroll text on LCD
void scrollText(String text) {
  int textLength = text.length();
  for (int i = 0; i <= textLength - 16; i++) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(text.substring(i, i + 16));
    delay(300);
  }
}

void setup() {
  lcd.init();       // Initialize LCD
  lcd.backlight();  // Turn on backlight
  lcd.clear();      // Clear LCD

  Serial.begin(9600);
  Serial.println("Code loaded successfully!");
  lcd.println("CALMA ACTIVATED");
  delay(1000);
  lcd.clear();
  input_password.reserve(32);  // maximum password size is 32, change if needed

  servo1.attach(SERVO_PIN_1);
  servo1.write(angle1);  // rotate first servo motor to 0°

  servo2.attach(SERVO_PIN_2);
  servo2.write(angle2);  // rotate second servo motor to 0°

  servo3.attach(SERVO_PIN_3);
  servo3.write(angle3);  // rotate third servo motor to 0°

  servo4.attach(SERVO_PIN_4);
  servo4.write(angle4);  // rotate fourth servo motor to 0°
}

void loop() {
  char key = kp.getKey();

  if (key) {
    Serial.print(key);
    lcd.print(key);

    if (key == '0') {
      input_password = "";  // reset the input password
    } else if (key == '#') {
      lcd.clear();  // Clear the LCD display before printing new information
      delay(100);   // Add a delay after clearing the LCD
      if (input_password == password_1 && input_password.length() == password_1.length()) {
        lcd.println("Success! Thank you For Using CALMA");
        Serial.println("Success! Thank you For Using CALMA...");
        angle1 = -180;
        servo1.write(angle1);
        rotationStartTime1 = millis();
        scrolling = true; // Start scrolling LCD message
        scrollStartTime = millis(); // Record scrolling start time
        lcd.clear();
        delay(500);
      } else if (input_password == password_2 && input_password.length() == password_2.length()) {
        lcd.print("Success! Thank you For Using CALMA...");
        Serial.println("Success, Vendo2 rotating");
        angle2 = 360;
        servo2.write(angle2);
        rotationStartTime2 = millis();
        scrolling = true; // Start scrolling LCD message
        scrollStartTime = millis(); // Record scrolling start time
      } else if (input_password == password_3 && input_password.length() == password_3.length()) {
        lcd.print("Success! Thank you For Using CALMA");
        Serial.println("Success, Vendo3 rotating");
        angle3 = 360;
        servo3.write(angle3);
        rotationStartTime3 = millis();
        scrolling = true; // Start scrolling LCD message
        scrollStartTime = millis(); // Record scrolling start time
      } else if (input_password == password_4 && input_password.length() == password_4.length()) {
        lcd.print("Success! Thank you For Using CALMA");
        Serial.println("Success, Vendo4 rotating");
        angle4 = 360;
        servo4.write(angle4);
        rotationStartTime4 = millis();
        scrolling = true; // Start scrolling LCD message
        scrollStartTime = millis(); // Record scrolling start time
      } else {
        lcd.print("Invalid! Try Again..");
        Serial.println("Invalid Input, try again");
        delay(100);
        lcd.clear();
        scrollText("Invalid! Try Again...");
        delay(1000);
        lcd.clear();
      }

      input_password = "";  // reset the input password
    } else {
      input_password += key;  // append new character to input password string
    }
  }

  // Check if rotation duration has passed and stop servos accordingly
  unsigned long currentTime = millis();
  if ((currentTime - rotationStartTime1) >= rotation_duration) {
    servo1.write(90);  // Stop servo 1 at 90°
  }
  if ((currentTime - rotationStartTime2) >= rotation_duration) {
    servo2.write(90);  // Stop servo 2 at 90°
  }
  if ((currentTime - rotationStartTime3) >= rotation_duration) {
    servo3.write(90);  // Stop servo 3 at 90°
  }
  if ((currentTime - rotationStartTime4) >= rotation_duration) {
    servo4.write(90);  // Stop servo 4 at 90°
  }

  // Check if scrolling duration has passed and stop scrolling
  if (scrolling && (currentTime - scrollStartTime >= 5000)) { // Assuming 5 seconds for scrolling duration
    scrolling = false;
  }
}
